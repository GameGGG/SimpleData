{"version":3,"file":"index.js","sources":["../utils/type.js","../src/core.js","../src/reverse.js","../src/number.js","../src/string.js","../src/index.js"],"sourcesContent":["/**\n * @param val { any }\n * @description 类型判断(string, number, boolean, array, function, object)\n * @return type { string }\n */\n\nexport default function isType(val) {\n  let type = (typeof val).toLocaleLowerCase();\n  if (type === 'object' && Array.isArray(val)) {\n    type = 'array';\n  }\n  return type;\n}\n","/**\n * Created by prefrence on 2021/02/09\n * @file core\n * @author white_g <mganxiaolei@gmail.com>\n */\n\n import isType from './../utils/type';\n\nclass DataAdapter {\n  constructor(data) {\n    this.data = data;\n  }\n\n  transData(originData, computes = []) {\n    if (computes.length === 0) {\n      return originData;\n    }\n    const compute = computes.shift();\n    const computeArr = compute.split(':');\n    let data = originData;\n    let result = originData;\n    const handleFunc = DataAdapter.filterMap[computeArr[0]];\n    const dataType = isType(data);\n    let newData = data;\n    // 引用类型数据处理使用copy数据，防止串改原数据\n    if (dataType === 'object') {\n      data = { ...originData };\n    }\n    if (dataType === 'array') {\n      data = [...originData];\n    }\n    if (handleFunc && isType(handleFunc) === 'function') {\n      result = handleFunc(data);\n    } else if (handleFunc && isType(handleFunc) === 'object') {\n      const typeHandleFunc = handleFunc[dataType];\n      result = typeHandleFunc ? typeHandleFunc(data) : data;\n    }\n    return this.transData(result, computes);\n  }\n\n  get(schema, defaultValue) {\n    // string类型拆分\n    let opt;\n    if (Array.isArray(schema)) {\n      opt = schema;\n    } else if ((typeof schema).toLowerCase() === 'string') {\n      opt = schema.split('.');\n    } else if ((typeof schema).toLowerCase() === 'object') {\n      const result = {};\n      Object.keys(schema).forEach(key => {\n        result[key] = this.get(schema[key], defaultValue);\n      });\n      return result;\n    }\n\n    return opt.reduce((prevData, item) => {\n      const arr = item.split('|');\n      const key = arr.shift();\n      if (prevData && prevData[key]) {\n        return this.transData(prevData[key], arr);\n      }\n      return defaultValue;\n    }, this.data);\n  }\n\n  // 新增过滤器\n  static addFilter(name, func) {\n    let filterName = name;\n    let filterHandle = func;\n\n    if (isType(name) !== 'string') {\n      filterHandle = name;\n      filterName = name.filterName;\n    }\n\n    if (isType(filterHandle) !== 'function' && isType(filterHandle) !== 'object') {\n      throw new Error('参数错误')\n    }\n\n    if (DataAdapter.filterMap[filterName]) {\n      throw new Error('存在重复的过滤器名称');\n    }\n    DataAdapter.filterMap[filterName] = filterHandle;\n  }\n}\n\nDataAdapter.filterMap = {};\n\nfunction creator(data) {\n  return new DataAdapter(data);\n};\n\ncreator.addFilter = DataAdapter.addFilter;\n\nexport default creator;\n\n","function reverseFilterHandle(res) {\n  return res.reverse();\n}\nexport default {\n  array: reverseFilterHandle,\n  filterName: 'reverse',\n};","function numberFilterHandle(val) {\n  if (Array.isArray(val)) {\n    return val.map(item => Number(item));\n  }\n  return Number(val);\n}\n\nnumberFilterHandle.filterName = 'number';\n\nexport default numberFilterHandle;\n","function stringFilterHandle(val) {\n  if (Array.isArray(val)) {\n    return val.map(item => String(item));\n  }\n  return String(val);\n}\n\nstringFilterHandle.filterName = 'string';\n\nexport default stringFilterHandle;\n","// core\nimport DataAdapter from './core';\n\n// 过滤器\nimport reverse from './reverse';\nimport number from './number';\nimport string from './string';\n\nDataAdapter.addFilter(reverse);\nDataAdapter.addFilter(number);\nDataAdapter.addFilter(string);\n\nexport default DataAdapter;\n"],"names":["isType","val","type","_typeof","toLocaleLowerCase","Array","isArray","DataAdapter","data","originData","computes","length","compute","shift","computeArr","split","result","handleFunc","filterMap","dataType","typeHandleFunc","this","transData","schema","defaultValue","opt","toLowerCase","Object","keys","forEach","key","_this","get","reduce","prevData","item","arr","name","func","filterName","filterHandle","Error","creator","addFilter","array","res","reverse","numberFilterHandle","map","Number","stringFilterHandle","String","number","string"],"mappings":"s2BAMe,SAASA,EAAOC,OACzBC,EAAOC,UAAQF,GAAKG,0BACX,WAATF,GAAqBG,MAAMC,QAAQL,KACrCC,EAAO,SAEFA,6kBCHHK,wBACQC,0BACLA,KAAOA,6CAGd,SAAUC,OAAYC,yDAAW,MACP,IAApBA,EAASC,cACJF,MAEHG,EAAUF,EAASG,QACnBC,EAAaF,EAAQG,MAAM,KAC7BP,EAAOC,EACPO,EAASP,EACPQ,EAAaV,EAAYW,UAAUJ,EAAW,IAC9CK,EAAWnB,EAAOQ,MAGP,WAAbW,IACFX,OAAYC,IAEG,UAAbU,IACFX,YAAWC,IAETQ,GAAqC,aAAvBjB,EAAOiB,GACvBD,EAASC,EAAWT,QACf,GAAIS,GAAqC,WAAvBjB,EAAOiB,GAA0B,KAClDG,EAAiBH,EAAWE,GAClCH,EAASI,EAAiBA,EAAeZ,GAAQA,SAE5Ca,KAAKC,UAAUN,EAAQN,sBAGhC,SAAIa,EAAQC,OAENC,YACApB,MAAMC,QAAQiB,GAChBE,EAAMF,OACD,GAAsC,WAAlCpB,UAAQoB,GAAQG,cACzBD,EAAMF,EAAOR,MAAM,UACd,GAAsC,WAAlCZ,UAAQoB,GAAQG,cAA4B,KAC/CV,EAAS,UACfW,OAAOC,KAAKL,GAAQM,SAAQ,SAAAC,GAC1Bd,EAAOc,GAAOC,EAAKC,IAAIT,EAAOO,GAAMN,MAE/BR,SAGFS,EAAIQ,QAAO,SAACC,EAAUC,OACrBC,EAAMD,EAAKpB,MAAM,KACjBe,EAAMM,EAAIvB,eACZqB,GAAYA,EAASJ,GAChBC,EAAKT,UAAUY,EAASJ,GAAMM,GAEhCZ,IACNH,KAAKb,iCAIV,SAAiB6B,EAAMC,OACjBC,EAAaF,EACbG,EAAeF,KAEE,WAAjBtC,EAAOqC,KACTG,EAAeH,EACfE,EAAaF,EAAKE,YAGS,aAAzBvC,EAAOwC,IAAyD,WAAzBxC,EAAOwC,SAC1C,IAAIC,MAAM,WAGdlC,EAAYW,UAAUqB,SAClB,IAAIE,MAAM,cAElBlC,EAAYW,UAAUqB,GAAcC,WAMxC,SAASE,EAAQlC,UACR,IAAID,EAAYC,GAHzBD,EAAYW,UAAY,GAMxBwB,EAAQC,UAAYpC,EAAYoC,gBCzFjB,CACbC,MAJF,SAA6BC,UACpBA,EAAIC,WAIXP,WAAY,WCLd,SAASQ,EAAmB9C,UACtBI,MAAMC,QAAQL,GACTA,EAAI+C,KAAI,SAAAb,UAAQc,OAAOd,MAEzBc,OAAOhD,GCJhB,SAASiD,EAAmBjD,UACtBI,MAAMC,QAAQL,GACTA,EAAI+C,KAAI,SAAAb,UAAQgB,OAAOhB,MAEzBgB,OAAOlD,UDGhB8C,EAAmBR,WAAa,SCAhCW,EAAmBX,WAAa,WCCpBI,UAAUG,KACVH,UAAUS,KACVT,UAAUU"}